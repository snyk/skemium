package io.snyk.skemium.meta;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.snyk.skemium.avro.TableAvroSchemas;
import io.snyk.skemium.helpers.Git;
import io.snyk.skemium.helpers.JSON;
import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.function.BinaryOperator;
import java.util.stream.Collectors;

/// Describes metadata of the Avro Schemas generated by Skemium.
///
/// It tries to provide a "snapshot" view of what arguments were used to generate the schema files,
/// when it happened, which Git repository it was executed in and so forth.
///
/// @param created        When was the metadata and accompanying files created.
/// @param arguments      Command line arguments passed to the `generate` command.
/// @param schemaCount    Amount of Table Avro Schemas generated.
/// @param schemas        A [Map] of Table Avro Schemas checksums, indexed by their identifier.
/// @param checksumSHA256 An overall checksum of all the Table Avro Schemas.
/// @param vcsCommit      Local VCS commit at the time of the generation, if any; `NULL` otherwise.
/// @param vcsBranch      Local VCS branch at the time of the generation, if any; `NULL` otherwise.
/// @param vcsTag         Local VCS tag at the time of the generation, if any; `NULL` otherwise.
public record MetadataFile(
        @JsonFormat(without = {
                JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS,
                JsonFormat.Feature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS,
        })
        @JsonProperty(value = "created", required = true, index = 1)
        Instant created,
        @JsonProperty(value = "arguments", required = true, index = 2)
        List<String> arguments,
        @JsonProperty("count")
        int schemaCount,
        @JsonProperty(value = "schemas", required = true, index = 3)
        TreeMap<String, String> schemas,
        @JsonProperty(value = "sha256", required = true, index = 4)
        String checksumSHA256,
        @JsonProperty("vcsCommit")
        String vcsCommit,
        @JsonProperty("vcsBranch")
        String vcsBranch,
        @JsonProperty("vcsTag")
        String vcsTag
) {
    private static final Logger LOG = LoggerFactory.getLogger(MetadataFile.class);

    private static final BinaryOperator<String> BINARY_OPERATOR_NO_DUPLICATES = (a, b) -> a;

    public static final String FILENAME = ".skemium.meta.json";

    public static final Path AVRO_SCHEMA_FILENAME = Path.of("skemium.generate.meta.avsc");

    public static MetadataFile build(@Nonnull List<String> arguments,
                                     @Nonnull List<TableAvroSchemas> avroSchemas) throws JsonProcessingException {
        final Git.GitInfo gitInfo = Git.tryGetInfo(Path.of("."));

        return new MetadataFile(Instant.now(),
                arguments,
                avroSchemas.size(),
                avroSchemas.stream().collect(Collectors
                        .toMap(
                                TableAvroSchemas::identifier,
                                TableAvroSchemas::checksum,
                                BINARY_OPERATOR_NO_DUPLICATES,
                                TreeMap::new)),
                DigestUtils.sha256Hex(avroSchemas.stream()
                        .map(TableAvroSchemas::checksum)
                        .collect(Collectors.joining())),
                gitInfo.commit(),
                gitInfo.branch(),
                gitInfo.tag());
    }

    /// Save a file with the content of [MetadataFile] in the given directory [Path].
    ///
    /// @param outputDir [Path] to the directory where to save the file. Directory MUST already exist and be writable.
    /// @throws FileNotFoundException
    /// @throws JsonProcessingException
    public void saveTo(@Nonnull final Path outputDir) throws FileNotFoundException, JsonProcessingException {
        final Path fileOutputPath = outputDir.toAbsolutePath().resolve(FILENAME);

        LOG.trace("Saving Skemium metadata: {}", fileOutputPath);
        try (final PrintWriter out = new PrintWriter(fileOutputPath.toString())) {
            out.println(JSON.pretty(this));
        }
    }

    /// Loads an [MetadataFile] from filesystem.
    ///
    /// @param inputDir [Path] to the directory
    /// @return An [MetadataFile]
    /// @throws IOException
    public static MetadataFile loadFrom(@Nonnull final Path inputDir) throws IOException {
        final Path fileInputPath = inputDir.toAbsolutePath().resolve(FILENAME);

        return JSON.from(fileInputPath.toFile(), MetadataFile.class);
    }

    @JsonProperty(value = "created_ISO8601", required = true, access = JsonProperty.Access.READ_ONLY, index = 0)
    public String createdISO8601() {
        return created.toString();
    }

    @JsonIgnore
    /// Shorthand to get to the keys of the [#schemas] map.
    public Set<String> getTableSchemasIdentifiers() {
        return schemas.keySet();
    }

    @JsonIgnore
    /// Shorthand to check if a [TableAvroSchemas] with the given identifier is present.
    public boolean hasTableSchemas(String identifier) {
        return schemas.containsKey(identifier);
    }
}
