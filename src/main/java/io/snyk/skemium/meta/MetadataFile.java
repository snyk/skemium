package io.snyk.skemium.meta;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.snyk.skemium.avro.AvroSchemaFile;
import io.snyk.skemium.helpers.Git;
import io.snyk.skemium.helpers.JSON;
import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.time.Instant;
import java.util.List;
import java.util.TreeMap;
import java.util.function.BinaryOperator;
import java.util.stream.Collectors;

/**
 * Describes metadata of the Avro Schemas generated by Skemium.
 * It tries to provide a "snapshot" view of what arguments where used to generate the schema files,
 * when it happened, which Git repository it was executed in and so forth.
 *
 * @param created
 * @param arguments
 * @param schemaCount
 * @param schemas
 * @param checksumSHA256
 * @param vcsCommit
 * @param vcsBranch
 * @param vcsTag
 */
public record MetadataFile(
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSZ", timezone = "UTC")
        @JsonProperty("created") Instant created,
        @JsonProperty("arguments") List<String> arguments,
        @JsonProperty("count") int schemaCount,
        @JsonProperty("schemas") TreeMap<String, String> schemas,
        @JsonProperty("sha256") String checksumSHA256,
        @JsonProperty("vcsCommit") String vcsCommit,
        @JsonProperty("vcsBranch") String vcsBranch,
        @JsonProperty("vcsTag") String vcsTag
) {
    private static final Logger LOG = LoggerFactory.getLogger(MetadataFile.class);

    private static final BinaryOperator<String> BINARY_OPERATOR_NO_DUPLICATES = (a, b) -> a;

    public static final String FILENAME = ".skemium.meta.json";

    public static MetadataFile build(List<String> arguments, List<AvroSchemaFile> avroSchemas) {
        final Git.GitInfo gitInfo = Git.tryGetInfo(Path.of("."));

        return new MetadataFile(Instant.now(),
                arguments,
                avroSchemas.size(),
                avroSchemas.stream().collect(Collectors
                        .toMap(
                                AvroSchemaFile::identifier,
                                AvroSchemaFile::checksum,
                                BINARY_OPERATOR_NO_DUPLICATES,
                                TreeMap::new)),
                DigestUtils.sha256Hex(avroSchemas.stream()
                        .map(AvroSchemaFile::checksum)
                        .collect(Collectors.joining())),
                gitInfo.commit(),
                gitInfo.branch(),
                gitInfo.tag());
    }

    /**
     * Save a file with the content of {@link MetadataFile} in the given directory {@link Path}.
     *
     * @param outputDir {@link Path} to the directory where to save the file. Directory MUST already exist and be writable.
     * @throws FileNotFoundException
     * @throws JsonProcessingException
     */
    public void saveTo(final Path outputDir) throws FileNotFoundException, JsonProcessingException {
        final Path fileOutputPath = outputDir.toAbsolutePath().resolve(FILENAME);

        LOG.trace("Saving Skemium metadata: {}", fileOutputPath);
        try (final PrintWriter out = new PrintWriter(fileOutputPath.toString())) {
            out.println(JSON.pretty(this));
        }
    }

    /**
     * Loads an {@link MetadataFile} from filesystem.
     *
     * @param inputDir {@link Path} to the directory
     * @return An {@link MetadataFile}
     * @throws IOException
     */
    public static MetadataFile loadFrom(final Path inputDir) throws IOException {
        final Path fileInputPath = inputDir.toAbsolutePath().resolve(FILENAME);

        return JSON.from(fileInputPath.toFile(), MetadataFile.class);
    }
}
